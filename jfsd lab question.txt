Develop a Spring Boot application to update an existing Book using PUT request with JPA on a Book entity class. The Book class should include properties such as Book ID, Title, Author, Genre, Price, and Published Year. Insert records manually in the table.


Students are required to:
Create the model, repository, service, and controller, considering the package structure as com.klef.jfsd.exam.
The database name should be labexam.
Update application.properties accordingly as per the task.
Test the above operations using the Postman API tool.




































// Step 1: Creating the Spring Boot Application

// File: Book.java (Model Class)
package com.klef.jfsd.exam.model;

import jakarta.persistence.*;

@Entity
@Table(name = "books")
public class Book {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;
    private String author;
    private String genre;
    private double price;
    private int publishedYear;

    // Getters and setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public String getGenre() {
        return genre;
    }

    public void setGenre(String genre) {
        this.genre = genre;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getPublishedYear() {
        return publishedYear;
    }

    public void setPublishedYear(int publishedYear) {
        this.publishedYear = publishedYear;
    }
}

// File: BookRepository.java (Repository Layer)
package com.klef.jfsd.exam.repository;

import com.klef.jfsd.exam.model.Book;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BookRepository extends JpaRepository<Book, Long> {
}

// File: BookService.java (Service Layer)
package com.klef.jfsd.exam.service;

import com.klef.jfsd.exam.model.Book;
import com.klef.jfsd.exam.repository.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class BookService {

    @Autowired
    private BookRepository bookRepository;

    public Book updateBook(Long id, Book updatedBook) {
        Optional<Book> existingBookOptional = bookRepository.findById(id);
        if (existingBookOptional.isPresent()) {
            Book existingBook = existingBookOptional.get();
            existingBook.setTitle(updatedBook.getTitle());
            existingBook.setAuthor(updatedBook.getAuthor());
            existingBook.setGenre(updatedBook.getGenre());
            existingBook.setPrice(updatedBook.getPrice());
            existingBook.setPublishedYear(updatedBook.getPublishedYear());
            return bookRepository.save(existingBook);
        } else {
            throw new RuntimeException("Book not found with ID: " + id);
        }
    }
}

// File: BookController.java (Controller Layer)
package com.klef.jfsd.exam.controller;

import com.klef.jfsd.exam.model.Book;
import com.klef.jfsd.exam.service.BookService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/books")
public class BookController {

    @Autowired
    private BookService bookService;

    @PutMapping("/{id}")
    public ResponseEntity<Book> updateBook(@PathVariable Long id, @RequestBody Book updatedBook) {
        Book book = bookService.updateBook(id, updatedBook);
        return ResponseEntity.ok(book);
    }
}

// File: application.properties
spring.datasource.url=jdbc:mysql://localhost:3306/labexam
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

// Manual Data Insertion
// You can insert records manually into the "books" table using a tool like MySQL Workbench or any SQL editor.
// Example SQL:
// INSERT INTO books (title, author, genre, price, published_year) VALUES
// ('Book1', 'Author1', 'Genre1', 500.0, 2020),
// ('Book2', 'Author2', 'Genre2', 300.0, 2018);

// Testing the API
// Use Postman to send a PUT request to: http://localhost:8080/api/books/{id}
// Include a JSON body like:
// {
//     "title": "Updated Title",
//     "author": "Updated Author",
//     "genre": "Updated Genre",
//     "price": 600.0,
//     "publishedYear": 2021
// }
